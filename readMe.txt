■概要
オブジェクト指向プログラミングのサンプルソースコードです。
初心者でも簡単に動作環境を構築できるように意識して作りました。

■はじめに
本アプリケーションは、昔勤めていた会社で新人にオブジェクト指向プログラミングの教材として、休みにコツコツつくったものをブラッシュアップしたものです。
初心者でも簡単に動作環境を構築できるようにデータベースは使用せずApachとPHPだけで動作する作りとなっています。ですのでWindowsですとXAMPPをインストールするだけで動作します。（もちろんApachとPHPを設定していただいても構いません。）
以下のリンク先のページを順に読み、手順通りの操作をすれば一通りの学習ができます。

・XAMPPのインストール手順
・本アプリケーションをXAMPP上に構築する手順
・各デザインパターンの説明


■画面キャプチャー



ホーム画面「http://localhost/object/index.php」へウェブブラウザへアクセスする。
ログインしていないと、ログイン画面へのリンクが表示されるので、そちらへ遷移する。
IDとPasswordは適当に初期設定してあるので、そのままログインする。

ホーム画面には各機能へのリンクを用意してるので、
そちらから各機能を実装した画面へ遷移できるようにしました。

あくまで学習用に作った物なのでクロスサイトリクエストフォージェリ等に対する脆弱性があります。
ですので、実際の商用サービスそのまま利用しないでください。

オブジェクト指向の勉強をするだけなら、
ちょっとWebを検索するだけでパターンごとのサンプルが見つかります。
本プログラムは、オブジェクト指向の勉強のみを目的とはしておらず、
擬似的にではあるにせよ１つのプロダクトを通しで作るという狙いを持っています。


各機能はそれぞれを極力独立させてはいるが、
操作対象に使う商品データを取り込むためのFactoryメソッドは
結合度が高い構造となった。



■Facade≪ログイン処理をつくろう≫
------------------------------------
http://doriven.hatenablog.com/entry/2014/06/07/003302
ユーザがログインする、という一連の処理の流れを掘り下げれば、Validation、Database Access、パスワードのハッシュ化など様々な処理が複雑に絡み合って成り立っている処理を、”ログイン”というひとつの抽象的な手続きでまとめられています。
これがFacadeパターンの概念と一致します。
------------------------------------
・index.html		…ログイン画面、IDとPasswordを入力するための画面
・login.php			…Facadeパターンの入り口に相当する部分、すごくシンプルになっている。
　└authManager.php	…ログインに関するごちゃごちゃとした処理をやるところ
　　├user.php		…ユーザ情報を取得するクラス、DBは使いたくなかったので、ただIDとPasswordを返すだけの機能を持つ
　　├hash.php		…パスワードをハッシュ化するための機能を持つ。
　　└session.php	…クッキーにログイン中であるというフラグを持たせる。
・logout.php		…ついでに作ったログアウト処理、クッキーの情報を消す。


■TemplateMethod



■FactoryMethod≪ファイルから商品のデータを読みこもう≫
・index.php			…読み込んだファイルを表示する。
・factory.php		…Readerクラスのインスタンス生成を行うクラス
　└readerInterface.php	…読み込み機能を表すインターフェースクラス
　　├csvReader.php		…CSV形式のファイルを読み込むReaderクラス
　　└jsonReader.php	…Json形式のファイルを読み込むReaderクラス


■Iterator≪商品データに対する反復操作で、商品の一覧を表示しよう≫
------------------------------------
・繰返し処理の抽象化
・以前に作ったFactoryMethodのソースコードを使ってデータを取得している。
------------------------------------
・index.php			…イテレータパターンを利用して商品データを一覧で表示する。
・book.php			…商品(本)を表すクラス、商品の商法を受け取って、内部に保持するだけのクラス。
・books.php			…商品(本)のリストを表すクラス。
・priceIterator.php	…books.phpとは別に、フィルターとしての機能をもつイテレータクラスを作った。


■Composite≪ツリー構造で商品データを表示しよう≫
・index.php			…コンポジットパターンを利用して商品データをツリー構造で表示する。
・abstractEntry.php	…抽象クラス、これを継承して枝と葉が作られるから、枝葉を同一視することができる。
　├category.php	…木構造の枝に相当するクラス
　└book.php		…木構造の端末に位置する葉に相当するクラス


■Strategy≪戦略を切り替えよう≫
------------------------------------
アルゴリズムをクラスとして定義し、切り替えられるようにする。
------------------------------------
・index.php						…各ストラテジーの結果に基づいてユーザに特定のメッセージを提示する。
・context.php					…共通にアクセスさせるためのAPIを提供する。
・abstractStrategy.php			…抽象クラス
　├releaseMonthStrategy.php	…商品(本)の発売日について当月と同じか/前か/後かを判別する。
　└bookNameStrategy.php		…商品(本)の名前について特定の文字が含まれているかどうかを判別し、
								　おすすめのリンクURLを返り値として返す。


■Bridge≪機能と実装を繋げて、商品を並び替えよう≫
・index.php				…ブリッジターンを利用して商品データをソート表示する。
・sorter.php			…ソートの実装、利用者に提供するAPIを定義している。
　└timerSorter.php		…sorter.phpを継承したクラス。ソートに要した時間を表示する機能を追加した。
・sortInterface.php		…ソート機能のインターフェイス
　├bubbleSort.php		…バブルソートの機能
　└countingSort.php	…カウンティングソートの機能


■Observer≪買い物かごの中身を観てみよう≫
------------------------------------
買い物かごの中身は$_SESSIONで保持する仕様とした。
かごの中身が空だとDecoratorパターンの機能は使えない。
------------------------------------
・index.php						…買い物かごとしての機能をユーザに提示する。
・cart.php						…監視される側のクラス。買い物かごに商品を追加したり、かごから消したりする機能もある。
・cartListenerInterface.php		…監視する側のクラス。インターフェイスなので実装はない。
　　├loggingListener.php		…買い物かごの中に変化があったときの記録をとるクラス。var_dumpで中身の情報を表示する。
　　└deliveryCostListener.php	…買い物の合計金額が基準をこえていないと、配送料を課金する。
								　想定外に少々複雑な処理になってしまった。


■Decorator≪購入する商品を包装しよう≫
------------------------------------
かごの中身が空だとDecoratorパターンの機能は使えない。
------------------------------------
・index.php			…買い物かごの中の商品を包装する機能をユーザに提示する。
・packInterface.php	…インターフェイス
　├plainPack.php	…編集前の包装を表すクラスです
　└abstractPackDecorator.php	…抽象クラス
　　├bigPack.php	…箱のサイズを大きくする
　　├cyanPack.ph	…水色で包装する
　　└hardPack.php	…固い外箱で包装する

